void Lock(char* lockname, int dialogId)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* lockname_ = lockname;
    int dialogId_ = dialogId;
    bool _;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL INSERT INTO Locks (Name, IsLocked, DialogId) VALUES (:lockname_, true, :dialogId_);
    EXEC SQL COMMIT;

    EXEC SQL SELECT isLocked INTO :_ FROM Locks WHERE Name = :lockname_ FOR UPDATE;

    //EXEC SQL PREPARE TRANSACTION :lockname_;
    char transaction[256] = "prepare transaction '";
    strcat(transaction, lockname_);
    strcat(transaction, "'");
    ECPGtrans(__LINE__, NULL, transaction);

    EXEC SQL COMMIT;
}

void Wait(char* lockname)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* lockname_ = lockname;
    bool _;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT isLocked INTO :_ FROM Locks WHERE Name = :lockname_ FOR UPDATE;

    EXEC SQL COMMIT;
}

void Unlock(char* lockname)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* lockname_ = lockname;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL COMMIT;

    //EXEC SQL COMMIT PREPARED :lockname_;
    char transaction[256] = "commit prepared '";
    strcat(transaction, lockname_);
    strcat(transaction, "'");
    ECPGtrans(__LINE__, NULL, transaction);

    EXEC SQL COMMIT;

    EXEC SQL UPDATE Locks SET IsLocked = false WHERE Name = :lockname_;

    EXEC SQL COMMIT;
}

void UnlockAll(int dialogId)
{
    EXEC SQL BEGIN DECLARE SECTION;
    int dialogId_ = dialogId;
    char* value;
    int transactionsCount = -1;
    int j = 0;
    char** transactionNames;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT count(*) INTO :transactionsCount FROM locks WHERE DialogId = :dialogId_ AND isLocked = true;

    transactionNames = (char**) malloc (sizeof (char*) * transactionsCount);
    for (int i = 0; i < transactionsCount; i++)
    {
        transactionNames[i] = (char*) malloc (100 * sizeof(char));
    }

    EXEC SQL DECLARE cursor4 CURSOR FOR
        SELECT Name FROM locks WHERE DialogId = :dialogId_ AND isLocked = true;
    EXEC SQL OPEN cursor4;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    while (1)
    {
        EXEC SQL FETCH cursor4 INTO :transactionNames[j++];
    }
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL CLOSE cursor4;

    EXEC SQL COMMIT;

    for (int i = 0; i < transactionsCount; i++)
    {
        Unlock(transactionNames[i]);
    }
}


void CreateLocksTrigger()
{
    EXEC SQL DROP FUNCTION IF EXISTS clear_old_locks CASCADE;
    EXEC SQL CREATE OR REPLACE FUNCTION clear_old_locks() RETURNS trigger AS
    $$
    BEGIN
        DELETE FROM locks WHERE isLocked = false;
        RETURN NULL;
    END;
    $$ LANGUAGE plpgsql;


    EXEC SQL CREATE TRIGGER clear_old_locks
        BEFORE INSERT
        ON locks
        FOR STATEMENT
    EXECUTE PROCEDURE clear_old_locks();

    EXEC SQL COMMIT;
}