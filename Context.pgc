#include "IO.h"
#include "Dialogs.h"
#include "Accounts.h"
#include "Context.h"
#include "Messages.h"
#include "Locks.h"

EXEC SQL WHENEVER SQLWARNING SQLPRINT;
EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER NOT FOUND CONTINUE;

void EnsureCreated()
{
    CreateAccountsTable();

    CreateDialogsTable();

    CreateMessagesTable();

    CreateAccountsDialogsTable();

    CreateLocksTableTrigger();

    EXEC SQL COMMIT;
}

void FillSomeData()
{
    Register("User1", "qwerty");
    Register("User2", "qwerty");
    Register("User3", "qwerty1");
    Register("User4", "qwerty123");

    CreateDialog("User1", "User2");
    CreateDialog("User1", "User3");
    CreateDialog("User2", "User3");
    CreateDialog("User4", "User3");

    AddMessage(1, 1, "Message1 User1 -> (User1, User2)");
    AddMessage(1, 1, "Message2 User1 -> (User1, User2)");
    AddMessage(2, 1, "Message3 User2 -> (User1, User2)");
    AddMessage(1, 2, "Message4 User1 -> (User1, User3)");
    AddMessage(3, 3, "Message5 User3 -> (User2, User3)");
    AddMessage(2, 3, "Message6 User2 -> (User2, User3)");
    AddMessage(3, 3, "Message7 User3 -> (User2, User3)");
    AddMessage(4, 4, "Message8 User4 -> (User4, User3)");
}

void DropTables()
{
    DropLocksTableTrigger();
    DropAccountsDialogsTable();
    DropMessagesTable();
    DropDialogsTable();
    DropAccountsTable();

    EXEC SQL COMMIT;
}

EXEC SQL BEGIN DECLARE SECTION;
const char* connection = "connection";
EXEC SQL END DECLARE SECTION;

bool Connect(char* address, char* port, char* dbname, char* dbUser, char* dbUserPassword)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char target[STRING_SIZE] = "";
    char *user_ = dbUser;
    char *password_ = dbUserPassword;
    EXEC SQL END DECLARE SECTION;

    strcat(target, "tcp:postgresql://");
    strcat(target, address);
    strcat(target, ":");
    strcat(target, port);
    strcat(target, "/");
    strcat(target, dbname);

    EXEC SQL CONNECT TO :target AS :connection USER :user_ IDENTIFIED BY :password_;

    return true;
}

void PrintDbVersion()
{
    EXEC SQL BEGIN DECLARE SECTION;
    char version[STRING_SIZE];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT version() INTO :version;

    printf("%s\n", version);
}

void Disconnect()
{
    EXEC SQL DISCONNECT :connection;
}
