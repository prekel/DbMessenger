#include <stdio.h>
#include <stdbool.h>
#include <malloc.h>

#include <pgtypes.h>
#include <ecpglib.h>
#include <ecpgerrno.h>
#include <sqlca.h>

EXEC SQL WHENEVER SQLWARNING SQLPRINT;
EXEC SQL WHENEVER SQLERROR SQLPRINT;

void CreateLocksTrigger();

void EnsureCreated()
{
    EXEC SQL CREATE TABLE table1 (id serial);

    EXEC SQL CREATE EXTENSION IF NOT EXISTS pgcrypto;

    EXEC SQL CREATE TABLE Accounts
    (
        AccountId            serial PRIMARY KEY,
        Nickname             text      NOT NULL UNIQUE,
        RegistrationDateTime timestamp NOT NULL DEFAULT current_timestamp,
        LoginDateTime        timestamp,
        PasswordHash         text      NOT NULL
    );

    EXEC SQL CREATE TABLE Dialogs
    (
        DialogId serial PRIMARY KEY
    );

    EXEC SQL CREATE TABLE Messages
    (
        MessageId    serial PRIMARY KEY,
        Text         text      NOT NULL,
        SendDateTime timestamp NOT NULL DEFAULT current_timestamp,
        DialogId     int       NOT NULL,
        AuthorId     int       NOT NULL,
        FOREIGN KEY (DialogId) REFERENCES Dialogs (DialogId) ON DELETE CASCADE,
        FOREIGN KEY (AuthorId) REFERENCES Accounts (AccountId) ON DELETE CASCADE
    );

    EXEC SQL CREATE TABLE AccountsDialogs
    (
        AccountId int NOT NULL,
        DialogId  int NOT NULL,
        PRIMARY KEY (AccountId, DialogId),
        FOREIGN KEY (AccountId) REFERENCES Accounts (AccountId) ON DELETE CASCADE,
        FOREIGN KEY (DialogId) REFERENCES Dialogs (DialogId) ON DELETE CASCADE
    );

    EXEC SQL CREATE TABLE Locks
    (
        Name text PRIMARY KEY,
        IsLocked boolean NOT NULL
    );

    CreateLocksTrigger();

    EXEC SQL COMMIT;
}

void Drop()
{
    EXEC SQL DROP TABLE IF EXISTS Locks CASCADE;
    EXEC SQL DROP TABLE IF EXISTS AccountsDialogs CASCADE;
    EXEC SQL DROP TABLE IF EXISTS Messages CASCADE;
    EXEC SQL DROP TABLE IF EXISTS Dialogs CASCADE;
    EXEC SQL DROP TABLE IF EXISTS Accounts CASCADE;
    EXEC SQL DROP TABLE IF EXISTS table1 CASCADE;

    EXEC SQL COMMIT;
}

void Alter()
{
    EXEC SQL ALTER TABLE table1 ADD value int NOT NULL;

    EXEC SQL COMMIT;
}

void AddVal(int val)
{
    EXEC SQL BEGIN DECLARE SECTION;
    int val1 = val;
    EXEC SQL END DECLARE SECTION;
    EXEC SQL INSERT INTO table1 (value) VALUES (:val1);

    EXEC SQL COMMIT;
}

void SelectPrint()
{
    EXEC SQL BEGIN DECLARE SECTION;
    int id = 0;
    int value = 0;
    EXEC SQL END DECLARE SECTION;
    EXEC SQL DECLARE cursor1 CURSOR FOR
        SELECT * FROM table1
        ORDER BY id;
    EXEC SQL OPEN cursor1;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    while (1)
    {
        EXEC SQL FETCH cursor1 INTO :id, :value;
        printf("%d %d\n", id, value);
    }
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL CLOSE cursor1;

    EXEC SQL COMMIT;
}

void Register(char* login, char* password)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* login_ = login;
    char* password_ = password;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL INSERT INTO Accounts (Nickname, PasswordHash) VALUES (:login_, crypt(:password_, gen_salt('md5')));

    EXEC SQL COMMIT;
}

bool Login(char* login, char* password)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* login_ = login;
    char* password_ = password;
    bool res = false;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT (PasswordHash = crypt(:password_, PasswordHash)) INTO :res FROM Accounts WHERE Nickname = :login_;

    if (res)
    {
        EXEC SQL UPDATE Accounts SET LoginDateTime = current_timestamp WHERE Nickname = :login_;
    }

    EXEC SQL COMMIT;
    return res;
}

void Lock(char* lockname)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* lockname_ = lockname;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL INSERT INTO Locks (Name, IsLocked) VALUES (:lockname_, true);
    EXEC SQL COMMIT;

    EXEC SQL SELECT * FROM Locks WHERE Name = :lockname_ FOR UPDATE;

    //EXEC SQL PREPARE TRANSACTION :lockname_;
    char transaction[256] = "prepare transaction '";
    strcat(transaction, lockname_);
    strcat(transaction, "'");
    ECPGtrans(__LINE__, NULL, transaction);

    EXEC SQL COMMIT;
}

void Wait(char* lockname)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* lockname_ = lockname;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT * FROM Locks WHERE Name = :lockname_ FOR UPDATE;

    EXEC SQL COMMIT;
}

void Unlock(char* lockname)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* lockname_ = lockname;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL COMMIT;

    //EXEC SQL COMMIT PREPARED :lockname_;
    char transaction[256] = "commit prepared '";
    strcat(transaction, lockname_);
    strcat(transaction, "'");
    printf("\n\n%s", transaction);
    ECPGtrans(__LINE__, NULL, transaction);

    EXEC SQL COMMIT;

    EXEC SQL UPDATE Locks SET IsLocked = false WHERE Name = :lockname_;

    EXEC SQL COMMIT;
}

int CreateDialog(char* name1, char* name2)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* name1_ = name1;
    char* name2_ = name2;
    int dialogId = -1;
    int user1Id = -1;
    int user2Id = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL INSERT INTO Dialogs (DialogId) VALUES (DEFAULT) RETURNING dialogid INTO :dialogId;

    EXEC SQL SELECT AccountId INTO :user1Id FROM Accounts WHERE nickname = :name1_;
    EXEC SQL SELECT AccountId INTO :user2Id FROM Accounts WHERE nickname = :name2_;

    EXEC SQL INSERT INTO AccountsDialogs (AccountId, DialogId) VALUES (:user1Id, :dialogId);
    EXEC SQL INSERT INTO AccountsDialogs (AccountId, DialogId) VALUES (:user2Id, :dialogId);

    EXEC SQL COMMIT;
    return dialogId;
}

int GetDialogsCount(char* nickname)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* nickname_ = nickname;
    int userId = -1;
    int count = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT AccountId INTO :userId FROM Accounts WHERE nickname = :nickname_;
    EXEC SQL SELECT count(*) INTO :count FROM AccountsDialogs WHERE AccountId = :userId;

    return count;
}

void GetDialogs(char* nickname, int* outArray)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char* nickname_ = nickname;
    int userId = -1;
    int id;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT AccountId INTO :userId FROM Accounts WHERE nickname = :nickname_;

    EXEC SQL DECLARE cursor2 CURSOR FOR
        SELECT DialogId FROM AccountsDialogs WHERE AccountId = :userId ORDER BY DialogId;
    EXEC SQL OPEN cursor2;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    while (1)
    {
        EXEC SQL FETCH cursor2 INTO :id;
        *outArray = id;
        outArray++;
    }
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL CLOSE cursor2;

    EXEC SQL COMMIT;
}

void GetDialogTwoMembers(int dialogId, char* outName1, char* outName2)
{
    EXEC SQL BEGIN DECLARE SECTION;
    int dialogId_ = dialogId;
    char* outName1_ = outName1;
    char* outName2_ = outName2;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL DECLARE cursor3 CURSOR FOR
        SELECT Nickname
        FROM Accounts
            JOIN AccountsDialogs ON Accounts.AccountId = AccountsDialogs.AccountId
        WHERE DialogId = :dialogId_
        ORDER BY Accounts.AccountId;
    EXEC SQL OPEN cursor3;
    EXEC SQL FETCH cursor3 INTO :outName1_;
    EXEC SQL FETCH cursor3 INTO :outName2_;
    EXEC SQL CLOSE cursor3;

    EXEC SQL COMMIT;
}

void SendMessage(int authorId, int dialogId, char* message)
{

}

void ReceiveMessage(int dialogId)
{

}

void StartReceivingMessages(int dialogId)
{
    EXEC SQL BEGIN DECLARE SECTION;
    int dialogId_ = dialogId;
    EXEC SQL END DECLARE SECTION;


}

void CreateLocksTrigger()
{
    EXEC SQL DROP FUNCTION IF EXISTS clear_old_locks CASCADE;
    EXEC SQL CREATE OR REPLACE FUNCTION clear_old_locks() RETURNS trigger AS
    $$
    BEGIN
        DELETE FROM locks WHERE isLocked = false;
        RETURN NULL;
    END;
    $$ LANGUAGE plpgsql;


    EXEC SQL CREATE TRIGGER clear_old_locks
        BEFORE INSERT
        ON locks
        FOR STATEMENT
    EXECUTE PROCEDURE clear_old_locks();

    EXEC SQL COMMIT;
}

int main(int argc, char** argv)
{
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    EXEC SQL BEGIN DECLARE SECTION;
    char *target = "tcp:postgresql://localhost:5432/demo";
    char *target1 = "tcp:postgresql://192.168.66.1:5432/demo";
    char *user = "postgres";
    char *password = "qwerty123";
    char *password1 = "zasxcd123";
    char *connection = "connection";
    char *connection1 = "connection1";
    char ver[256];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL CONNECT TO :target AS :connection USER :user IDENTIFIED BY :password;
    //EXEC SQL CONNECT TO :target1 AS :connection1 USER :user IDENTIFIED BY :password1;

    EXEC SQL AT :connection SELECT version() INTO :ver;
    printf("version: %s\n", ver);

    //EXEC SQL AT :connection1 SELECT version() INTO :ver;
    //printf("version: %s\n", ver);

    EXEC SQL SET CONNECTION :connection;

    int a;
    scanf("%d", &a);
    printf("%d", a);

    if (a == 0)
    {
        EnsureCreated();
    }
    if (a == 1)
    {
        Drop();
    }
    if (a == 2)
    {
        Register("Vladislav213", "123456");
    }
    if (a == 3)
    {
        Login("Vladislav213", "1234516");
    }
    if (a == 10)
    {
        Lock("qwerty5");
    }
    if (a == 11)
    {
        Wait("qwerty5");
    }
    if (a == 12)
    {
        Unlock("qwerty5");
    }
    if (a == 20)
    {
        Lock("qwerty3");
    }
    if (a == 21)
    {
        Wait("qwerty3");
    }
    if (a == 22)
    {
        Unlock("qwerty3");
    }
    if (a == 30)
    {
        CreateLocksTrigger();
    }
    if (a == 40)
    {
        CreateDialog("Vladislav213", "qwerty");
    }
    if (a == 50)
    {
        int c = GetDialogsCount("Vladislav213");
        int* a = (int*) malloc(c * sizeof(int));
        GetDialogs("Vladislav213", a);
        for (int i = 0; i < c; i++)
        {
            printf("%d ", a[i]);
        }
        free(a);
    }
    if (a == 60)
    {
        char name1[1000];
        char name2[1000];

        GetDialogTwoMembers(5, name1, name2);

        printf("%s %s ", name1, name2);
    }

    return 0;
}
